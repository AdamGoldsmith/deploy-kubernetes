# -*- mode: ruby -*-
# vi: set ft=ruby

BRIDGE_NET="192.168.10."
DOMAIN="local.com"
servers=[
  {
    :hostname => "atomic-master." + DOMAIN,
    :ip => BRIDGE_NET + "10",
    :ssh_port => "2222",
    :ram => 1024
  },
  {
    :hostname => "atomic-node1." + DOMAIN,
    :ip => BRIDGE_NET + "20",
    :ssh_port => "2223",
    :ram => 512
  },
  {
    :hostname => "atomic-node2." + DOMAIN,
    :ip => BRIDGE_NET + "21",
    :ssh_port => "2224",
    :ram => 512
  },
  {
    :hostname => "atomic-node3." + DOMAIN,
    :ip => BRIDGE_NET + "22",
    :ssh_port => "2225",
    :ram => 512
  },
  {
    :hostname => "atomic-node4." + DOMAIN,
    :ip => BRIDGE_NET + "23",
    :ssh_port => "2226",
    :ram => 512
  }
]

Vagrant.configure(2) do |config|
  servers.each do |machine|
    config.vm.define machine[:hostname] do |node|
      node.vm.box = "centos/atomic-host"
#      node.vm.box_url = "http://cloud.centos.org/centos/7/atomic/images/CentOS-Atomic-Host-7-Vagrant-Virtualbox.box"
#      node.vm.box_download_checksum = 
      node.vm.usable_port_range = (2222..2250)
      node.vm.hostname = machine[:hostname]
      #node.vm.network "public_network", ip: machine[:ip], bridge: 'Intel(R) Centrino(R) Wireless-N 130'
      node.vm.network "private_network", ip: machine[:ip], virtualbox__intnet: "intnet"
#      node.vm.network "forwarded_port", guest: 22, host: machine[:ssh_port]
      #node.ssh.host = machine[:ip]
      #node.ssh.private_key_path = "private_key"
      #node.ssh.username = "atomic"
      node.ssh.password = "vagrant"
      node.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--memory", machine[:ram]]
        vb.name = machine[:hostname]
      end
    end
  end
end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
